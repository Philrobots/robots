#!/usr/bin/env python3
import base64
import json
import threading

import cv2
import numpy as np
import rospy
from flask import Flask
from flask_socketio import SocketIO
from nav_msgs.msg import Path
from sensor_msgs.msg import Image
from std_msgs.msg import Bool, String

app = Flask(__name__)
socket = SocketIO(app, cors_allowed_origins="*")

rospy.init_node("websockets", anonymous=True)
rate = rospy.Rate(1)


def to_base64(image):
    image_array = np.frombuffer(image.data, dtype=np.uint8).reshape(image.height, image.width, -1)
    image_array = cv2.cvtColor(image_array, cv2.COLOR_RGB2BGR)
    _, buffer = cv2.imencode('.jpg', image_array)
    img_base64 = base64.b64encode(buffer).decode('utf-8')
    return f'data:image/jpeg;base64, {img_base64}'


def handle_robot_consumption(robot_consumption):
    json_data = json.dumps({"robotConsumption": json.loads(robot_consumption.data)})
    socket.emit("robot_consumption", json_data)


def handle_world_cam_image_raw(image):
    image_base64 = to_base64(image)
    json_data = json.dumps({"tableImage": image_base64})
    socket.emit("table_image", json_data)
    rate.sleep()


def handle_robot(robot):
    data = json.loads(robot.data)["robot"]
    json_data = json.dumps({"realTrajectoryCoordinate": {"x": data[0], "y": data[1]}})
    socket.emit("real_trajectory_coordinate", json_data)


def handle_path(path):
    poses = []

    for pose in path.poses:
        poses.append({"x": pose.pose.position.x, "y": pose.pose.position.y})

    json_data = json.dumps({"plannedTrajectoryCoordinates": poses})
    socket.emit("planned_trajectory_coordinates", json_data)


def is_puck_to_be_released(data):
    return data[2] == 8


def is_puck_in_grip(data):
    return data[2] == 7


def should_emit_puck_in_grip(data):
    # TODO : Spaghetti codity-doditoo
    return is_puck_in_grip(data) or is_puck_to_be_released(data)


def handle_movement_vectors_string(movement_vectors_string):
    if movement_vectors_string.data != "FINISHED":
        data = json.loads(movement_vectors_string.data)
        if should_emit_puck_in_grip(data):
            json_data = json.dumps({"puckInGrip": is_puck_in_grip(data)})
            socket.emit("grip_state", json_data)


def handle_resistance(resistance):
    json_data = json.dumps({"resistance": int(resistance.data)})
    socket.emit("resistance", json_data)


def handle_puck_colors(puck_colors):
    json_data = json.dumps({"puckColors": json.loads(puck_colors.data)})
    socket.emit("puck_colors", json_data)


def handle_letters(letters):
    first_letter = json.loads(letters.data)[0]
    json_data = json.dumps({"puckFirstCorner": first_letter})
    socket.emit("puck_first_corner", json_data)

def handle_current_step(step):
    step_bro = step.data
    json_data = json.dumps({"currentStep": step_bro})
    socket.emit("current_step", json_data)


def handle_current_step(current_step):
    json_data = json.dumps({"currentStep": current_step.data})
    socket.emit("current_step", json_data)


def websockets():
    start_cycle_publisher = rospy.Publisher("start_cycle", Bool, queue_size=10)

    rospy.Subscriber("robot_consumption", String, handle_robot_consumption)
    rospy.Subscriber("world_cam/image_raw", Image, handle_world_cam_image_raw, queue_size=1, buff_size=52428800)
    rospy.Subscriber("robot", String, handle_robot)
    rospy.Subscriber("path", Path, handle_path)
    rospy.Subscriber("movement_vectors_string", String, handle_movement_vectors_string)
    rospy.Subscriber("resistance", String, handle_resistance)
    rospy.Subscriber("puck_colors", String, handle_puck_colors)
    rospy.Subscriber("letters", String, handle_letters)
    rospy.Subscriber("current_step", String, handle_current_step)

    @socket.on('start_cycle')
    def handle_start_cycle():
        start_cycle_publisher.publish(True)

    # TODO : IP address should come from env vars
    # threading.Thread(target=lambda: socket.run(app, host='192.168.0.49', port=4000)).start()
    threading.Thread(target=lambda: socket.run(app, host='0.0.0.0', port=4000)).start()

    rospy.spin()


if __name__ == '__main__':
    try:
        websockets()
    except rospy.ROSInterruptException:
        pass
