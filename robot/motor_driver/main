#! /usr/bin/env python3
import json
import time

import rospy
import serial
from std_msgs.msg import String


class MotorDriver:
    def __init__(self):
            
        self.min_angle_rotation = 0
        self.min_angle_rotation_correction = 2 
        self.ser = serial.Serial('/dev/ttyACM0',115200, timeout=0.01)
        self.ser.flush()
        time.sleep(1)
        while not self.ser.isOpen():
            pass

        print("started motors")
        rospy.Subscriber("movement_vectors_string", String, self.callback, queue_size=1)
        self.pub = rospy.Publisher("resistance", String, queue_size=1)
        self.pub_line = rospy.Publisher("line", String, queue_size=1)

    def callback(self, data):
        if data.data != "FINISHED":
            movement = json.loads(data.data)
            distance, angle, mode = movement
            self.move_robot(distance, angle, mode)

    def move_robot(self, module, angle, mode):
        if abs(angle) > self.min_angle_rotation and angle != 0:
            if angle > 0:
                self.writeStringWithAck(f"4:{angle}")
            else:
                self.writeStringWithAck(f"5:{abs(angle)}")

        if mode == 6:
            res = self.writeStringWithAck(f"{mode}:")
            if res is not None:
                self.pub.publish(res)

        elif mode > 6:
            self.writeStringWithAck(f"{mode}:")

        elif module > 0:
            self.writeStringWithAck(f"{mode}:{module}")

    def writeStringWithAck(self, data):
        self.ser.flush()
        writeStart = time.time()
        self.ser.write(str.encode(data))
        ackReceived = False
        
        while not ackReceived:
            while self.ser.in_waiting == 0:
                if time.time() - writeStart >= 1000:  #a enlev√© si superflue
                    ackReceived = True
                    return
            
            line = self.ser.readline().decode('utf-8')
            self.pub_line.publish(line)

            if 'res' in line:
                line = line.strip('res')
                line = line.strip('\r\n')
                return line
            if 'ack' in line:
                ackReceived = True


if __name__ == "__main__":
    try:
        rospy.init_node("motor_driver", anonymous=True)
        MotorDriver()
        rospy.spin()
    except rospy.ROSInterruptException:
        pass

